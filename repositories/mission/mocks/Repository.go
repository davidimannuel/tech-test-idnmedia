// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	mission "idnmedia/repositories/mission"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, m
func (_m *Repository) Create(ctx context.Context, m mission.MissionModel) (int, error) {
	ret := _m.Called(ctx, m)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, mission.MissionModel) int); ok {
		r0 = rf(ctx, m)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, mission.MissionModel) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllPagination provides a mock function with given fields: ctx, offset, limit
func (_m *Repository) FindAllPagination(ctx context.Context, offset int, limit int) ([]mission.MissionModel, int, error) {
	ret := _m.Called(ctx, offset, limit)

	var r0 []mission.MissionModel
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []mission.MissionModel); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mission.MissionModel)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, offset, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindOneByID provides a mock function with given fields: ctx, id
func (_m *Repository) FindOneByID(ctx context.Context, id int) (mission.MissionModel, error) {
	ret := _m.Called(ctx, id)

	var r0 mission.MissionModel
	if rf, ok := ret.Get(0).(func(context.Context, int) mission.MissionModel); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(mission.MissionModel)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
